</div>
<!-- Container ends here-->
</main>
<%- include('_footer-view') %>

<%- include('_nmus') %>

</body>
<script id="lab-template" type="x-tmpl-mustache">
  <div class="lab" data-lab-id="{{_id}}">
    <div class="project-border"></div>
    <header>{{title}}
      <div class="cn-options">
        <span class="cn-opt" id="lab-edit"><i class="fa fa-pencil"></i>  Edit</span>
      </div>
    </header>
    <section class="desc">
      {{desc}}
    </section>
    <section class="info">
      {{subject}}, {{duration}}m
    </section>
    <footer>
      <section class="header">
        Batches
      </section>
      <section class="list" id="batch-list">
      </section>
      <section class="comp-form" id="cb-frm">
        <%- include('_batch-lab-part')%>
      </section>
      <section class="footer-msg">
        <div class="empty-list">Create a new batch, e.g. IT, 3rd Year Odd Sem.</div>
      </section>
    </footer>
  </div>
</script>
<script type="x-tmpl-mustache" id="batch-template">
  <section class="batch">
    <section class="t-header" onclick="showBatchBody(this)">
    <i class="fa fa-check-square"></i>  {{stream}}, {{year}} Year, {{sem}} Sem
    </section>
    <section class="t-body hide">
      <section class="header">
        Groups
        <div class="cn-options">
          <span class="cn-opt" id="lab-edit"><i class="fa fa-plus"></i>  Create Group</span>
        </div>
      </section>
      <section class="list">

      </section>
      <section class="footer-msg">
        <div class="empty-list">Create a new group.</div>
      </section>
    </section>
  </section>
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.3.0/mustache.min.js"></script>
<script src="../js/mfw.min.js"></script>
<script>
  const OK_ICON = '<i class="fa fa-check"></i> ';
  const NOK_ICON = '<i class="fa fa-warning"></i> ';

  $(document).ready(function() {
    $(".button-collapse").sideNav();
    initTabs();
    refreshNavState();
    //$('.modal').modal();

    $('.datepicker').pickadate({
       selectMonths: true, // Creates a dropdown to control month
       selectYears: 2, // Creates a dropdown of 15 years to control year,
       today: 'Today',
       clear: 'Clear',
       close: 'Ok',
       closeOnSelect: true // Close upon selecting a date,
     });

      initTimePicker();
      $('select').material_select();
  });

  function initTimePicker() {
    $('.timepicker').pickatime({
       default: 'now', // Set default time: 'now', '1:30AM', '16:30'
       fromnow: 0,       // set default time to * milliseconds from now (using with default = 'now')
       twelvehour: true, // Use AM/PM or 24-hour format
       donetext: 'OK', // text for done-button
       cleartext: 'Clear', // text for clear-button
       canceltext: 'Cancel', // Text for cancel-button
       autoclose: false, // automatic close timepicker
       ampmclickable: true, // make AM PM clickable
       aftershow: function(){} //Function for after opening timepicker
     });
  }

  function initTabs() {
     $('ul#chall-tabs').tabs();
      $('ul#chall-tabs a').click(function() {
        console.log($(this).attr('href'));
      });
  }

  function refreshNavState() {
    var path = window.location.pathname;
    if(path.length > 1) {
      var href = path.lastIndexOf('/') != 0 ? ('/' + path.split('/')[1]) : path;
      $('.n_o').removeClass('a_o');
      $('a[href="' + href + '"]').each(function(i, a){
        if(!$(a).hasClass('grey-text')) {  $(a).addClass('a_o')};
      });
    }


    (function() {
      var right = '&#10095; ';
      $('#page-nav').html(right);
      var links = path.split('/');
      var no = 0;
      var prefix = '';
      if(path.indexOf('/profile') === 0) {
        $('#page-nav').hide();
        return;
      }
      $(links).each(function(a, link) {
        if(link.length > 0) {
          if(no > 0) {
            $('#page-nav').append(right);
          }
          no++;
          $('#page-nav').append('<a href="/' + prefix + link + '">' + link + '</a>');
          prefix += link + '/';
        }
      });
    })();

  }


  $('.nmus').click(function(event) {
    event.preventDefault();
    var type = $(this).attr('data-type');

    if($(window).width() <= 630) {
        $('body').css({overflow: 'hidden'});
        if(type.charAt(0) === 'S') {
          $('#js-mob-srch-ui').show();
          $('#js-comsg').hide();
        } else {
          $('#js-mob-srch-ui').hide();
          $('#js-comsg').show();
        }
        $('#a-nmus').show();
        $('.a-main-panel').animate({'margin-right': '9%'}, 300);
        $('#nmus-type .title span').html(type);
        $('.js-srch-qry:visible').focus();
    } else {
      if($(this)[0].hasAttribute('style')) {
        _commonTask();
      } else {
        _commonTask();
        $(this).css({'background-color': '#fff', color: '#5B2C6F'});
        var mainPanel = $(this).siblings()[0];
        $(mainPanel).show();
        $(mainPanel).find('.title-text').text(type);
        $('.js-srch-qry:visible').focus();
      }
    }

  });

  function _commonTask() {
    $('.nmus').removeAttr('style');
    $('.main-panel').hide();
  }

  $('#nmus-type .close-btn').click(function() {
    hideNmus();
  });

  $('#a-nmus').click(function(event) {
    if(event.target.id === 'a-nmus') {
      hideNmus();
    }
  });

  function hideNmus() {
    $('body').removeAttr('style');
    $('.a-main-panel').animate({'margin-right': '-80%'}, 300, function() {
      $('#a-nmus').fadeOut('fast');
    });
  }

  function toast(html) {
    if(html) {
      $('#toast').html(html);
      $('#toast').css('display', 'inline-block');
    }
  }

  function hideToast(time, html) {
    if(html) {
      $('#toast').html(html);
    }
    setTimeout(function() {
      $('#toast').fadeOut();
    }, time);

  }

  $('.main-panel').click(function(event) {
    _commonTask();
  });
  $('.m-u-lrg').click(function(event) {
    event.stopPropagation();
  });

  var LAB = {

    batches: [],
    _btn: null
  };

  function saveLab(frm, btn) {
    var json = getLabObj(frm);
    LAB._btn = btn;
    toast('Saving lab...');
    saveDoc(
      json,
      '/api/msit/labs/',
      _saveLabCallback,
      'Lab Saved',
      'Unable to save');
  }

  function _saveLabCallback(data, json) {
    json._id = data._id;
    LAB.lab = json;
    showLab();
  }

  function saveDoc(json, url, successCallback, succMsg, errorMsg) {
    $(LAB._btn).attr('disabled', 'true');
    $.ajax({
      data: {doc: JSON.stringify(json)},
      url: url,
      method: 'post',
      success: function(data) {
        hideToast(2000, OK_ICON + succMsg);
        successCallback(data, json);
      },
      error: function(xhr, text, error) {
        console.log(text);
        console.dir(error);
        console.dir(xhr);
        hideToast(2000, NOK_ICON + errorMsg);
        enableBtn();
      }
    });
  }

  function enableBtn() {
    $(LAB._btn).removeAttr('disabled');
  }

  function showLab() {
    $('.js-abt-lab').html(Mustache.render($('#lab-template').html(), LAB.lab));
    $('.scl').remove();
    $('[name="labId"]').val(LAB.lab._id);
    $('select').material_select();
    initTimePicker();
  }

  function getLabObj(frm) {
    var json = formToJSON(frm);
    json.batches = [];
    json.slug = toSlug(json.title);
    json.clg = 'msit';
    json.duration = parseInt(json.hr * 60) + parseInt(json.min);
    json.cd = new Date();
    delete json.hr;
    delete json.min;
    return json;
  }

  function _saveBatchCallback(data, json) {
    json._id = data._id;
    $('#batch-list').append(
    Mustache.render($('#batch-template').html(), json));
    LAB.batches.push(json);
    enableBtn();
  }

  function saveBatch(frm, btn) {
      LAB._btn = btn;
      var json = formToJSON($(frm));
      json.groups = [];
      if(!isAdded(json)) {
        toast('Saving batch...');
        saveDoc(json, '/api/msit/labs/create-batch',
           _saveBatchCallback, 'Batch Saved', 'Unable to save');

      }


      function isAdded(json) {
        var keys = Object.keys(json);
        for(var i = 0; i < LAB.batches.length; i++) {
          for(var j = 0; j < keys.length; j++) {
            if(keys[j] != 'groups' &&
             (json[keys[j]] != LAB.batches[i][keys[j]])) {
              return false;
            }
          }
        }
        return LAB.batches.length === 0 ? false : true;
      }
  }

  function toSlug(title) {
    return title.replace(/\s+/g, '-').toLowerCase();
  }


  function formToJSON(form) {
    var json = {};
    var arr = $(form).serializeArray();
    $(arr).each(function(i, obj) {
      var $n = obj.name, $v = obj.value;
      if(!json[$n]) {
        json[$n] = $v;
      } else {
        var what = json[$n];
        if(typeof what === 'string') {
          json[$n] = [what];
        }
        json[$n].push($v);
      }
    });
    return json;
  }


  function showBatchBody(hdr) {
    $(hdr).next().toggleClass('hide');
  }

  /*
    $('.n_o').on('click', function(event) {
        event.preventDefault();
        __changeLinkUI(this);
        var url = $(this).attr('href');
        var _url = '/' + url;

        if(isCached(_url)) {
          doNext(__getCachedContent(_url), url);
        } else {
          getHTML(url, {}, doNext);
        }


        function __getCachedContent(url) {
          return $.parseJSON(window.localStorage.getItem(url)).html;
        }

        function __changeLinkUI(link) {
          $('.n_o').removeClass('a_o');
          $(link).addClass('a_o');
          $(link).find('.badge').remove();
        }
    });

    function getHTML(url, data, _callback) {
      toast();
      var _url = '_' + url
      $.ajax({
        url: _url,
        data: data,
        method: 'GET',
        async: true,
        success: function(data) {
          _callback(data, url);
        },
        error: function(xhr, status, error) {
          _callback(xhr.responseText);
        },
        complete: function() {
          hideToast();
        }

      });
    }

    function doNext(data, url) {
      var obj = {
        html: data
      };
      var title = renderView(obj);
      window.history.pushState(obj, title, url);
      cacheContent(obj);

    }

    window.addEventListener('popstate', function(event) {
      showCachedContent(event);
    });

    function showCachedContent(e) {
      if(e.state) {
        renderView(e.state);
        refreshNavState();
      } else {
      //  window.location.assign(window.location.href);
      }
    }

    function renderView(obj) {
      $('#htm').html(obj.html);
      var title = $('#dummy-title').text();
      $('title').text(title);
      return title;
    }

    function cacheContent(obj) {
      window.localStorage.setItem(window.location.pathname, JSON.stringify(obj));
    }

    function isCached(url) {
      return window.localStorage.getItem(url) != null;
    }

    window.onbeforeunload = function() {
      window.localStorage.clear();
    };
  */


</script>
</html>
